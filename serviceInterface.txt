

// Liefert ein instanziertes object/function zurück.
// Die idee ist, das nicht der Step/function/service den manager nach den Enpoints fragt, sondern diese
// schon hier übergeben werden. Somit muss der Step/service den Manager nicht kennen.
getInstance(param);
// es gibt einen check der die Parameter automatisch gegen die Beschreibung validiert.


// ?????
// irgentwie müssen wir die Proxys die eine instanz liefern von den reinen Services unterscheiden.
getService(param);

// führt den step aus.
// in der config sind dann die daten wie unten beschrieben.
// configParam wird auch automatisch validiert.
execute(configParam)


// gibt den namen zurück unter der diese(s) abstract objject/function
// registriert wird.
getName();
// beschreibung der Antwort
{
    class: <class name>                     // ein belibiger name ob elemente in classen zu ordnen
    name: <name>                            // ein name innerhalb dieser Klasse
    instanceName : <der name der Instanz>   // dies ist hauptsächlich sinnvol für services die gleich
                                            // sind und nur durch dir Parameter unterschiedliche funktionieren.
                                            // Die Instanz ist optional
}


// giobt eine reine textuelle beschreibung dieser Komponente zurück.
// wird nur benutzt um des dem user in der GUI anzeigen zu können
getDescription();

// beschreibt welche parameter erwarted werden um eine instanz dieses
// Objects/function zu erzeugen
getParameterDescription()

// structur der Beschreibung
{
        type: <service/template>                // hiermit meine ich ob das Teil über getInstance() oder über get Service geholt wird.
                                                // ein Service kann direct verwendet werden. Ein 'template' muss erste instanziiert werden.
        instanceParameter{
            endpoints: {                            // Hash der endpoints
                <name> : {                          // Name des endpoints.
                        type : <in|out>             // der Typ des endpoins
                        mandatory: <true|false>     // muss der endpoint vorhanden sein
                        desc: <any text>            // eine textuelle beschreibung des endpoints. Nur für die GUI oder als doc
                        dataType: {
                            <fieldName 1> : {         // beschreibt ein jedes feld in dem hash des endpoints
                                type : <stream|string|number|function|object|hash|array|...>
                                subType: <Duplex>           // der subtype ist optional. Definiert für objecte von welchem type sie sein sollen
                                mandatory: <true|false>
                                desc: <any text>
                            },
                            <fieldName 1> : {
                                ...
                            }
                        }
                    },
                },
            },
            config : {                              // daten die für die Konfiguration des services/step instance benötigt werden
                <fieldName 1> : {
                    ...
                }
            }
        },
        serviceParameter{
            parameter : {                             // request parameter
                <fieldName 1> : {
                    ...
                }
            }
        }

}
